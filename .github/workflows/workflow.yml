on:
  push:
    tags:
      - '**'

env:
  _BASE_IMAGE_NAME: docker.pkg.github.com/teoxoy/factorio-blueprint-editor
  _RUST_TARGET: x86_64-unknown-linux-gnu
  _FRONTEND_DOCKERFILE_PATH: .github/docker/frontend.dockerfile
  _BACKEND_DOCKERFILE_PATH: .github/docker/backend.dockerfile
  _FRONTEND_NGINX_CONFIG_PATH: .github/docker/nginx.conf
  _BACKEND_MANIFEST_PATH: packages/backend/Cargo.toml
  _FRONTEND_DIST_PATH: packages/website/dist
  _BACKEND_EXECUTABLE_PATH: packages/backend/target/x86_64-unknown-linux-gnu/release/fbe_backend
  _KUBERNETES_DEPLOYMENT_PATH: .github/kubernetes/deployment.yml
  _TMP_DOCKER_CONTEXT_PATH: /tmp/_docker_context_

jobs:
  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --ignore-scripts --frozen-lockfile

      - name: Build
        run: yarn build:website

      - name: Set _FRONTEND_IMAGE_ env var
        run: echo ::set-env name=_FRONTEND_IMAGE_::$_BASE_IMAGE_NAME/frontend:${GITHUB_REF#refs/tags/}

      - name: Prepare docker context
        run: |
          mkdir $_TMP_DOCKER_CONTEXT_PATH
          cp -r $_FRONTEND_DIST_PATH/. $_TMP_DOCKER_CONTEXT_PATH
          cp $_FRONTEND_NGINX_CONFIG_PATH $_TMP_DOCKER_CONTEXT_PATH

      - name: Build container image
        run: docker build -t $_FRONTEND_IMAGE_ -t latest -f $_FRONTEND_DOCKERFILE_PATH $_TMP_DOCKER_CONTEXT_PATH

      - name: Docker Login
        run: docker login https://docker.pkg.github.com -u teoxoy -p ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to Github Registry
        run: docker push $_FRONTEND_IMAGE_

  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env._RUST_TARGET }}
          override: true

      - id: cargo-registry
        name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo git dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git/db
          key: cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: packages/backend/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ env._RUST_TARGET }} --manifest-path ${{ env._BACKEND_MANIFEST_PATH }}

      # Run this step at the end after the cargo build commands
      - if: ${{ steps.cargo-registry.outputs.cache-hit != 'true' }}
        name: Prune unpacked sources of dependency crates from cache
        shell: bash
        run: |
          rm -rf ~/.cargo/registry/src

      - name: Set _BACKEND_IMAGE_ env var
        run: echo ::set-env name=_BACKEND_IMAGE_::$_BASE_IMAGE_NAME/backend:${GITHUB_REF#refs/tags/}

      - name: Prepare docker context
        run: |
          mkdir $_TMP_DOCKER_CONTEXT_PATH
          cp $_BACKEND_EXECUTABLE_PATH $_TMP_DOCKER_CONTEXT_PATH

      - name: Build container image
        run: docker build -t $_BACKEND_IMAGE_ -t latest -f $_BACKEND_DOCKERFILE_PATH $_TMP_DOCKER_CONTEXT_PATH

      - name: Docker Login
        run: docker login https://docker.pkg.github.com -u teoxoy -p ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to Github Registry
        run: docker push $_BACKEND_IMAGE_

  deploy-to-k8s:
    name: Deploy new kubernetes deployment
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /tmp/kubeconfig
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set _FRONTEND_IMAGE_ and _BACKEND_IMAGE_ env vars
        run: |
          echo ::set-env name=_FRONTEND_IMAGE_::$_BASE_IMAGE_NAME/frontend:${GITHUB_REF#refs/tags/}
          echo ::set-env name=_BACKEND_IMAGE_::$_BASE_IMAGE_NAME/backend:${GITHUB_REF#refs/tags/}

      - name: Update deployment file
        run: |
          sed -i 's|<FRONTEND_IMAGE>|'${_FRONTEND_IMAGE_}'|' $_KUBERNETES_DEPLOYMENT_PATH
          sed -i 's|<BACKEND_IMAGE>|'${_BACKEND_IMAGE_}'|' $_KUBERNETES_DEPLOYMENT_PATH

      - name: Setup kubernetes config
        run: echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $KUBECONFIG

      - name: Deploy to Kubernetes
        run: kubectl apply -f $_KUBERNETES_DEPLOYMENT_PATH

      - name: Verify deployment
        run: kubectl rollout status deployment/factorio-blueprint-editor
